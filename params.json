{
  "name": "amanmanocha.github.com",
  "tagline": "",
  "body": "### Lombok your project.\r\n[Lombok](https://projectlombok.org/) is a great tool to keep your codebase clean and focused only on business logic. \r\nSetting it up on IDE (eclipse in my case) is easy if you follow guidelines given by lombok but setting it up outside IDE is not so simple. I have set it up on my gradle project using following steps. All changes are in build.gradle :\r\n\r\n1) Include lombok in dependencies\r\n```\r\ndependencies { \r\n    compile \"org.projectlombok:lombok:1.16.8\"\r\n}\r\n```\r\n2) Add a delombok task \r\n```\r\ntask delombok {\r\n    description 'Delomboks the source code'\r\n    ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath,  name: 'delombok')\r\n    ant.mkdir(dir: 'build/src-delomboked') \r\n    ant.delombok(verbose: 'true', encoding: 'UTF-8', to: 'build/src-delomboked', from: 'src/main/java')\r\n}\r\n```\r\nThis task will generate real code from lombok annotation and copy it to 'build/src-delomboked'\r\n\r\n3) Make gradle compile the code from the generated directory instead of src/main/java by adding following lines\r\n```\r\napply plugin: 'java'\r\n\r\nsourceSets.main.java {\r\n    setSrcDirs( ['build/src-delomboked/'] )\r\n}\r\n```\r\n\r\nThats it. This is all you need to do set up lombok in your gradle project.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}